# Cursor Rules for audit-tool Project

## CSS Architecture Guidelines

This project uses a **three-layer CSS architecture**. When writing styles, follow these rules:

### Layer 1: Design Tokens (CSS Custom Properties)
**Always use design tokens instead of hardcoded values:**

```css
/* ✅ GOOD - Use design tokens */
padding: var(--spacing-md);
color: var(--primary-color);
font-size: var(--font-size-sm);

/* ❌ BAD - Hardcoded values */
padding: 8px;
color: #00008f;
font-size: 14px;
```

**When to create new design tokens:**
- Any color, spacing, or typography value used more than once
- Values that need to be consistent across components
- Any value that might need theming (dark mode, brand variants)

### Layer 2: BEM Component Classes
**Use BEM (Block Element Modifier) for component styling:**

```css
/* ✅ GOOD - Semantic BEM classes */
.modal { }
.modal__header { }
.modal__close-button { }
.button--primary { }
.status-badge--completed { }

/* ❌ BAD - Non-semantic or inconsistent naming */
.redButton { }
.modalCloseBtn { }
.completed_status { }
```

**When to use BEM:**
- Creating new UI components
- Styling complex interactive elements
- When you need semantic meaning in class names
- Component has multiple states or variations

### Layer 3: Utility Classes
**Use utility classes for layout and common modifications:**

```tsx
{/* ✅ GOOD - Utilities for layout/spacing/typography */}
<div className="modal__header flex justify-between items-center">
<span className="field-label text-left text-uppercase">

{/* ❌ BAD - Custom CSS for common patterns */}
<div className="custom-header-layout">
<span className="custom-label-style">
```

**When to use utilities:**
- Layout (flexbox, grid)
- Margins and padding
- Text alignment and typography
- Quick styling that doesn't need semantic meaning

### Combining the Layers
**The proper way to combine all three layers:**

```tsx
<div className="case-info-grid text-left mb-8">
  {/* ^BEM component ^utility classes */}
  
  <span className="field-label text-uppercase">
    {/* ^BEM element ^utility modifier */}
  </span>
</div>
```

### CSS File Organization
- **Global tokens**: `src/index.css` (`:root` section)
- **Component styles**: `src/components/ComponentName.css` (BEM classes)
- **Utilities**: Defined in `src/index.css` (atomic classes)

### Naming Conventions

**Design Tokens:**
```css
--{category}-{property}-{variant}: value;
--spacing-margin-large: 2rem;
--color-status-success: #4caf50;
```

**BEM Classes:**
```css
.{block} { }                    /* .modal */
.{block}__{element} { }         /* .modal__header */
.{block}--{modifier} { }        /* .button--primary */
.{block}__{element}--{modifier} { } /* .button__text--disabled */
```

**Utility Classes:**
```css
.{property}-{value} { }         /* .text-center, .mb-4, .flex-col */
```

### Common Pitfalls to Avoid
- ❌ **Don't** mix utility classes with custom CSS properties in the same element
- ❌ **Don't** use arbitrary values (always use design tokens)
- ❌ **Don't** over-nest BEM elements (keep structure flat)
- ❌ **Don't** use utilities for complex component-specific logic
- ❌ **Don't** create new utility classes without checking if design tokens exist
- ❌ **Don't** use inline styles (use utility classes instead)

### Examples from Codebase

**Modal Component (Good Pattern):**
```tsx
<div className="modal__overlay">
  <dialog className="modal">
    <div className="modal__header flex justify-between items-center">
      <h3 className="modal__title">{title}</h3>
      <button className="modal__close-button">×</button>
    </div>
    <div className="modal__content">
      {children}
    </div>
  </dialog>
</div>
```

**Form Field (Good Pattern):**
```tsx
<div className="info-field flex flex-col">
  <span className="field-label text-left text-uppercase">Label</span>
  <span className="field-value text-left mt-micro">{value}</span>
</div>
```

## Commit Message Guidelines

When generating commit messages, follow these rules:

### Format
- Use conventional commit format: `type: brief description`
- Keep the entire message under 72 characters
- Use imperative mood (e.g., "fix", "add", "update", not "fixed", "added", "updated")
- No periods at the end of the subject line

### Types
- `feat`: new feature
- `fix`: bug fix
- `refactor`: code refactoring
- `test`: adding or updating tests
- `docs`: documentation changes
- `style`: formatting, missing semicolons, etc.
- `chore`: maintenance tasks

### Content
- Focus on WHAT changed, not WHY (save details for description if needed)
- Be specific but concise
- Examples of good messages:
  - `fix: disable Prüfen button for team leaders' own cases`
  - `test: add IN_PROGRESS case handling tests`
  - `refactor: simplify user role validation logic`
  - `feat: add case owner audit restriction`

### What to Avoid
- Vague messages like "fix bug" or "update code"
- Technical implementation details in the subject line
- Multiple changes in one commit message
- Overly verbose descriptions

## Code Generation Guidelines

When writing code:
- Follow existing patterns in the codebase
- Use TypeScript strict typing
- Add appropriate error handling
- Include relevant comments for business logic
- Follow the established naming conventions (camelCase for variables/functions, PascalCase for components)
- Apply CSS architecture principles for any styling work
- Reference CSS_ARCHITECTURE.md for detailed styling guidelines 

## TypeScript Folder and File Structure Guidelines

This project enforces **strict separation of types/interfaces from implementation code**. Follow these rules:

### Rule 1: Shared Types → `types/` Folder
**If a type/interface is used by MORE THAN ONE file:**

```typescript
// ✅ GOOD - Place in src/types/types.ts
export interface UserRoleInfo {
  role: UserRole;
  department: string;
}

// ✅ GOOD - Import in multiple files
import { UserRoleInfo } from '../types/types';
```

**Examples of shared types:**
- API response interfaces
- Redux state interfaces
- Common entity types (User, CaseAudit, etc.)
- Utility types used across components

### Rule 2: Local Types → `.types.ts` Files
**If a type/interface is used by ONLY ONE file:**

```typescript
// ✅ GOOD - Create caseAuditSlice.types.ts
export interface AuditCacheEntry {
  timestamp: number;
  data: StoredCaseAuditData;
}

export type AuditSliceHelpers = {
  clearExpiredEntries: () => void;
  validateAuditData: (data: unknown) => boolean;
};

// ✅ GOOD - Import in caseAuditSlice.ts
import { AuditCacheEntry, AuditSliceHelpers } from './caseAuditSlice.types';
```

### File Naming Convention
- **Implementation file**: `fileName.ts` / `fileName.tsx`
- **Local types file**: `fileName.types.ts`
- **Shared types**: `src/types/types.ts` or `src/types/specificDomain.ts`

### Examples from Codebase

**❌ BAD - Types mixed with implementation:**
```typescript
// caseAuditSlice.ts
interface AuditUIState {  // Local interface in implementation file
  currentUserId: string;
  // ...
}

const auditSlice = createSlice({
  // implementation...
});
```

**✅ GOOD - Types separated:**
```typescript
// caseAuditSlice.types.ts
export interface AuditUIState {
  currentUserId: string;
  // ...
}

// caseAuditSlice.ts
import { AuditUIState } from './caseAuditSlice.types';

const auditSlice = createSlice({
  // implementation...
});
```

### When to Create New Type Files

**Create `.types.ts` file when:**
- File has more than 2-3 local interfaces/types
- Types are complex (>5 properties)
- File becomes harder to read due to type definitions
- Types are likely to grow or change frequently

**Keep types in implementation file when:**
- Simple one-liner type aliases
- Temporary/experimental types
- Very tightly coupled to a specific function

### Folder Structure Examples

```
src/
├── types/
│   ├── types.ts              # Shared across multiple files
│   ├── brandedTypes.ts       # Domain-specific shared types
│   └── currencyTypes.ts      # Currency-related shared types
├── store/
│   ├── caseAuditSlice.ts     # Implementation
│   ├── caseAuditSlice.types.ts # Local types for slice
│   └── index.ts
├── components/
│   ├── Modal.tsx             # Implementation
│   ├── Modal.types.ts        # Local types for Modal
│   └── QuarterlySelection.tsx
└── services/
    ├── auditService.ts       # Implementation
    └── auditService.types.ts # Local types for service
```

### Import Guidelines

**✅ GOOD - Clear import sources:**
```typescript
// Shared types
import { User, CaseAudit } from '../types/types';

// Local types
import { ModalState, ModalActions } from './Modal.types';

// External libraries
import type { PayloadAction } from '@reduxjs/toolkit';
```

**❌ BAD - Mixed imports:**
```typescript
// Don't mix local and shared types in same import
import { User, ModalState } from '../types/types'; // ModalState is local!
```

### Benefits of This Structure

✅ **Cleaner Implementation Files** - Focus on logic, not type definitions  
✅ **Better Code Review** - Types changes are isolated and easier to review  
✅ **Improved Reusability** - Shared types are discoverable in `types/` folder  
✅ **Enhanced Maintainability** - Type changes don't clutter implementation diffs  
✅ **Better IDE Performance** - Smaller files load faster in TypeScript language service  

### Migration Strategy

When refactoring existing files:
1. Identify local vs shared types
2. Move shared types to `src/types/types.ts`
3. Create `.types.ts` file for local types
4. Update all imports
5. Verify no circular dependencies exist 

## Development Server Management Guidelines

**ALWAYS check for running dev servers before starting new instances** to prevent port conflicts and resource waste.

### Rule: Check Before Starting Dev Server

**Before running `npm run dev` or any development server command:**

1. **Check for existing dev server processes:**
```bash
# Check for Vite dev servers (ports 5173, 5174, etc.)
lsof -i :5173 -i :5174 -i :5175 -i :5176

# Or check for any Node.js processes that might be dev servers
ps aux | grep -E "(vite|dev|npm.*run.*dev)" | grep -v grep

# Check specifically for this project's dev server
ps aux | grep "audit-tool.*dev" | grep -v grep
```

2. **If a dev server is already running:**
   - ✅ **GOOD**: Use the existing server (navigate to the URL shown in terminal)
   - ✅ **GOOD**: Ask user if they want to stop the existing server first
   - ❌ **BAD**: Start a new server without checking (causes port conflicts)

3. **Recommended dev server check command sequence:**
```bash
# Step 1: Check if dev server is running
echo "🔍 Checking for existing dev servers..."
if lsof -i :5173 -i :5174 -i :5175 2>/dev/null | grep LISTEN; then
  echo "⚠️  Dev server already running on one of the common ports"
  echo "📍 You can access it at: http://localhost:5173 or http://localhost:5174"
  echo "❓ Do you want to stop the existing server and start a new one? (y/n)"
else
  echo "✅ No dev server detected, safe to start new instance"
  npm run dev
fi
```

4. **If you need to stop existing servers:**
```bash
# Kill processes on specific ports
lsof -ti:5173 | xargs kill -9 2>/dev/null || echo "No process on port 5173"
lsof -ti:5174 | xargs kill -9 2>/dev/null || echo "No process on port 5174"

# Or kill by process name
pkill -f "vite.*audit-tool" || echo "No Vite processes found"
```

### Terminal Command Templates

**✅ SAFE - Always use this pattern when starting dev servers:**
```bash
# Template for safe dev server startup
echo "🔍 Checking for existing dev servers..."
EXISTING_SERVER=$(lsof -i :5173 -i :5174 2>/dev/null | grep LISTEN)
if [ ! -z "$EXISTING_SERVER" ]; then
  echo "⚠️  Dev server already running:"
  echo "$EXISTING_SERVER"
  echo "📍 Navigate to http://localhost:5173 or http://localhost:5174"
  echo "💡 To restart, first kill existing server with: lsof -ti:5173 | xargs kill -9"
else
  echo "✅ Starting new dev server..."
  npm run dev
fi
```

**❌ DANGEROUS - Never do this without checking:**
```bash
# DON'T do this directly
npm run dev  # Could conflict with existing server
```

### Benefits of This Approach

✅ **Prevents port conflicts** - No more "EADDRINUSE" errors  
✅ **Saves resources** - Avoid running multiple unnecessary servers  
✅ **Better developer experience** - Clear feedback about server status  
✅ **Consistent workflow** - Same process every time  
✅ **Easy debugging** - Know exactly which servers are running where  

### Integration with Terminal Commands

When suggesting terminal commands that involve `npm run dev`, ALWAYS:
1. Include the dev server check first
2. Provide the user with clear next steps
3. Show them how to access existing servers if found
4. Give them the option to restart if needed

**Example of good command suggestions:**
```bash
# Check and start dev server safely
echo "🔍 Checking for running dev servers..." && \
if lsof -i :5173 -i :5174 2>/dev/null | grep -q LISTEN; then \
  echo "⚠️  Dev server already running. Check http://localhost:5173 or http://localhost:5174"; \
else \
  echo "✅ Starting dev server..." && npm run dev; \
fi
```